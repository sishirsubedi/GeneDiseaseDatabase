#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneDiseaseDatabase
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GeneDisease")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUserLogin(UserLogin instance);
    partial void UpdateUserLogin(UserLogin instance);
    partial void DeleteUserLogin(UserLogin instance);
    partial void InsertRNA(RNA instance);
    partial void UpdateRNA(RNA instance);
    partial void DeleteRNA(RNA instance);
    partial void InsertPatientDiagnosi(PatientDiagnosi instance);
    partial void UpdatePatientDiagnosi(PatientDiagnosi instance);
    partial void DeletePatientDiagnosi(PatientDiagnosi instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertPathway(Pathway instance);
    partial void UpdatePathway(Pathway instance);
    partial void DeletePathway(Pathway instance);
    partial void InsertGeneNetwork(GeneNetwork instance);
    partial void UpdateGeneNetwork(GeneNetwork instance);
    partial void DeleteGeneNetwork(GeneNetwork instance);
    partial void InsertGene(Gene instance);
    partial void UpdateGene(Gene instance);
    partial void DeleteGene(Gene instance);
    partial void InsertDNA(DNA instance);
    partial void UpdateDNA(DNA instance);
    partial void DeleteDNA(DNA instance);
    partial void InsertDiseaseGenetic(DiseaseGenetic instance);
    partial void UpdateDiseaseGenetic(DiseaseGenetic instance);
    partial void DeleteDiseaseGenetic(DiseaseGenetic instance);
    partial void InsertDisease(Disease instance);
    partial void UpdateDisease(Disease instance);
    partial void DeleteDisease(Disease instance);
    #endregion
		
		public DatabaseDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["GeneDiseaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UserLogin> UserLogins
		{
			get
			{
				return this.GetTable<UserLogin>();
			}
		}
		
		public System.Data.Linq.Table<RNA> RNAs
		{
			get
			{
				return this.GetTable<RNA>();
			}
		}
		
		public System.Data.Linq.Table<Protein> Proteins
		{
			get
			{
				return this.GetTable<Protein>();
			}
		}
		
		public System.Data.Linq.Table<PatientDiagnosi> PatientDiagnosis
		{
			get
			{
				return this.GetTable<PatientDiagnosi>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Pathway> Pathways
		{
			get
			{
				return this.GetTable<Pathway>();
			}
		}
		
		public System.Data.Linq.Table<GeneNetwork> GeneNetworks
		{
			get
			{
				return this.GetTable<GeneNetwork>();
			}
		}
		
		public System.Data.Linq.Table<Gene> Genes
		{
			get
			{
				return this.GetTable<Gene>();
			}
		}
		
		public System.Data.Linq.Table<DNA> DNAs
		{
			get
			{
				return this.GetTable<DNA>();
			}
		}
		
		public System.Data.Linq.Table<DiseaseGenetic> DiseaseGenetics
		{
			get
			{
				return this.GetTable<DiseaseGenetic>();
			}
		}
		
		public System.Data.Linq.Table<Disease> Diseases
		{
			get
			{
				return this.GetTable<Disease>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_ViewRecord_RNA")]
		public ISingleResult<UDSP_ViewRecord_RNAResult> UDSP_ViewRecord_RNA([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TableName", DbType="VarChar(10)")] string tableName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RecordID", DbType="VarChar(30)")] string recordID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName, recordID);
			return ((ISingleResult<UDSP_ViewRecord_RNAResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_ViewRecord_Protein")]
		public ISingleResult<UDSP_ViewRecord_ProteinResult> UDSP_ViewRecord_Protein([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TableName", DbType="VarChar(10)")] string tableName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RecordID", DbType="VarChar(30)")] string recordID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName, recordID);
			return ((ISingleResult<UDSP_ViewRecord_ProteinResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_ViewRecord_Patient")]
		public ISingleResult<UDSP_ViewRecord_PatientResult> UDSP_ViewRecord_Patient([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TableName", DbType="VarChar(10)")] string tableName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RecordID", DbType="Int")] System.Nullable<int> recordID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName, recordID);
			return ((ISingleResult<UDSP_ViewRecord_PatientResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_ViewRecord_Pathway")]
		public ISingleResult<UDSP_ViewRecord_PathwayResult> UDSP_ViewRecord_Pathway([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TableName", DbType="VarChar(10)")] string tableName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RecordID", DbType="VarChar(10)")] string recordID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName, recordID);
			return ((ISingleResult<UDSP_ViewRecord_PathwayResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_ViewRecord_Gene")]
		public ISingleResult<UDSP_ViewRecord_GeneResult> UDSP_ViewRecord_Gene([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TableName", DbType="VarChar(10)")] string tableName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RecordID", DbType="VarChar(30)")] string recordID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName, recordID);
			return ((ISingleResult<UDSP_ViewRecord_GeneResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_ViewRecord_DNA")]
		public ISingleResult<UDSP_ViewRecord_DNAResult> UDSP_ViewRecord_DNA([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TableName", DbType="VarChar(10)")] string tableName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RecordID", DbType="VarChar(30)")] string recordID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName, recordID);
			return ((ISingleResult<UDSP_ViewRecord_DNAResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_ViewRecord_Disease")]
		public ISingleResult<UDSP_ViewRecord_DiseaseResult> UDSP_ViewRecord_Disease([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TableName", DbType="VarChar(10)")] string tableName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RecordID", DbType="Int")] System.Nullable<int> recordID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName, recordID);
			return ((ISingleResult<UDSP_ViewRecord_DiseaseResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_ViewRecord")]
		public ISingleResult<UDSP_ViewRecordResult> UDSP_ViewRecord([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TableName", DbType="VarChar(10)")] string tableName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RecordID", DbType="Int")] System.Nullable<int> recordID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName, recordID);
			return ((ISingleResult<UDSP_ViewRecordResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_UpdateRNA")]
		public int UDSP_UpdateRNA([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RNAID", DbType="VarChar(30)")] string rNAID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RNALength", DbType="VarChar(30)")] string rNALength, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AlternativeSplicing", DbType="Int")] System.Nullable<int> alternativeSplicing, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DNAID", DbType="VarChar(30)")] string dNAID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), rNAID, rNALength, alternativeSplicing, dNAID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_UpdateProtein")]
		public int UDSP_UpdateProtein([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProteinID", DbType="VarChar(30)")] string proteinID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProteinName", DbType="VarChar(30)")] string proteinName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProteinLength", DbType="Int")] System.Nullable<int> proteinLength, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProteinMass", DbType="Int")] System.Nullable<int> proteinMass, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProteinType", DbType="VarChar(50)")] string proteinType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProteinStructure", DbType="VarChar(30)")] string proteinStructure, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="StrcutureAvailable", DbType="Int")] System.Nullable<int> strcutureAvailable, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RNAID", DbType="VarChar(30)")] string rNAID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), proteinID, proteinName, proteinLength, proteinMass, proteinType, proteinStructure, strcutureAvailable, rNAID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_UpdatePatient")]
		public int UDSP_UpdatePatient([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PatientID", DbType="Int")] System.Nullable<int> patientID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Age", DbType="Int")] System.Nullable<int> age, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Duration", DbType="VarChar(30)")] string duration, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Symptom", DbType="VarChar(30)")] string symptom, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="HospitalizedDays", DbType="Int")] System.Nullable<int> hospitalizedDays, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RegisterDate", DbType="DateTime")] System.Nullable<System.DateTime> registerDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateDate", DbType="DateTime")] System.Nullable<System.DateTime> updateDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Comment", DbType="VarChar(MAX)")] string comment, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PatientCost", DbType="Int")] System.Nullable<int> patientCost)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), patientID, age, duration, symptom, hospitalizedDays, isActive, registerDate, updateDate, comment, patientCost);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_UpdatePathway")]
		public int UDSP_UpdatePathway([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PathwayID", DbType="VarChar(30)")] string pathwayID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PathwayName", DbType="VarChar(50)")] string pathwayName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CellularProcess", DbType="VarChar(50)")] string cellularProcess)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pathwayID, pathwayName, cellularProcess);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_UpdateGene")]
		public int UDSP_UpdateGene([global::System.Data.Linq.Mapping.ParameterAttribute(Name="EntrezGeneID", DbType="VarChar(30)")] string entrezGeneID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GeneSymbol", DbType="VarChar(30)")] string geneSymbol, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GeneName", DbType="VarChar(50)")] string geneName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GeneType", DbType="VarChar(50)")] string geneType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Organism", DbType="VarChar(30)")] string organism, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GeneAlias", DbType="VarChar(50)")] string geneAlias, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Comment", DbType="VarChar(MAX)")] string comment)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), entrezGeneID, geneSymbol, geneName, geneType, organism, geneAlias, comment);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_UpdateDNA")]
		public int UDSP_UpdateDNA([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DNAID", DbType="VarChar(30)")] string dNAID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Locus", DbType="VarChar(30)")] string locus, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ExonCount", DbType="Int")] System.Nullable<int> exonCount, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Chromosome", DbType="Int")] System.Nullable<int> chromosome, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DNALength", DbType="VarChar(30)")] string dNALength, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DNAOrientation", DbType="VarChar(30)")] string dNAOrientation, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GeneID", DbType="VarChar(30)")] string geneID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dNAID, locus, exonCount, chromosome, dNALength, dNAOrientation, geneID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_UpdateDisease")]
		public int UDSP_UpdateDisease([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DiseaseID", DbType="Int")] System.Nullable<int> diseaseID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DiseaseName", DbType="VarChar(50)")] string diseaseName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DiseaseType", DbType="VarChar(50)")] string diseaseType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Cure", DbType="VarChar(30)")] string cure, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="OnsetAge", DbType="VarChar(30)")] string onsetAge, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Symptom", DbType="VarChar(MAX)")] string symptom, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Medicine", DbType="VarChar(50)")] string medicine, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MedicineCost", DbType="Int")] System.Nullable<int> medicineCost)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diseaseID, diseaseName, diseaseType, cure, onsetAge, symptom, medicine, medicineCost);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_PatientDiagnosis")]
		public ISingleResult<UDSP_PatientDiagnosisResult> UDSP_PatientDiagnosis([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Hint", DbType="VarChar(30)")] string hint)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), hint);
			return ((ISingleResult<UDSP_PatientDiagnosisResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_PatientCost")]
		public ISingleResult<UDSP_PatientCostResult> UDSP_PatientCost([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> patientID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), patientID);
			return ((ISingleResult<UDSP_PatientCostResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_GenomicAnalysis")]
		public ISingleResult<UDSP_GenomicAnalysisResult> UDSP_GenomicAnalysis([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GeneID", DbType="VarChar(30)")] string geneID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), geneID);
			return ((ISingleResult<UDSP_GenomicAnalysisResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_General")]
		public ISingleResult<UDSP_GeneralResult> UDSP_General()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<UDSP_GeneralResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_Epidemiology")]
		public ISingleResult<UDSP_EpidemiologyResult> UDSP_Epidemiology([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DiseaseName", DbType="VarChar(50)")] string diseaseName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diseaseName);
			return ((ISingleResult<UDSP_EpidemiologyResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_DeleteRecord_RNA")]
		public int UDSP_DeleteRecord_RNA([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TableName", DbType="VarChar(10)")] string tableName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RecordID", DbType="VarChar(20)")] string recordID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName, recordID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_DeleteRecord_Protein")]
		public int UDSP_DeleteRecord_Protein([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TableName", DbType="VarChar(10)")] string tableName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RecordID", DbType="VarChar(20)")] string recordID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName, recordID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_DeleteRecord_Patient")]
		public int UDSP_DeleteRecord_Patient([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TableName", DbType="VarChar(10)")] string tableName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RecordID", DbType="Int")] System.Nullable<int> recordID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName, recordID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_DeleteRecord_Pathway")]
		public int UDSP_DeleteRecord_Pathway([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TableName", DbType="VarChar(10)")] string tableName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RecordID", DbType="VarChar(20)")] string recordID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName, recordID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_DeleteRecord_Gene")]
		public int UDSP_DeleteRecord_Gene([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TableName", DbType="VarChar(10)")] string tableName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RecordID", DbType="VarChar(30)")] string recordID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName, recordID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_DeleteRecord_DNA")]
		public int UDSP_DeleteRecord_DNA([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TableName", DbType="VarChar(10)")] string tableName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RecordID", DbType="VarChar(20)")] string recordID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName, recordID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_DeleteRecord_Disease")]
		public int UDSP_DeleteRecord_Disease([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TableName", DbType="VarChar(10)")] string tableName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RecordID", DbType="Int")] System.Nullable<int> recordID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName, recordID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_DeleteRecord")]
		public int UDSP_DeleteRecord([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TableName", DbType="VarChar(10)")] string tableName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RecordID", DbType="VarChar(20)")] string recordID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName, recordID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_AddRNA")]
		public int UDSP_AddRNA([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RNAID", DbType="VarChar(30)")] string rNAID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RNALength", DbType="VarChar(30)")] string rNALength, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AlternativeSplicing", DbType="Int")] System.Nullable<int> alternativeSplicing, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DNAID", DbType="VarChar(30)")] string dNAID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), rNAID, rNALength, alternativeSplicing, dNAID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_AddProtein")]
		public int UDSP_AddProtein([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProteinID", DbType="VarChar(30)")] string proteinID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProteinName", DbType="VarChar(30)")] string proteinName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProteinLength", DbType="Int")] System.Nullable<int> proteinLength, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProteinMass", DbType="Int")] System.Nullable<int> proteinMass, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProteinType", DbType="VarChar(50)")] string proteinType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProteinStructure", DbType="VarChar(30)")] string proteinStructure, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="StrcutureAvailable", DbType="Int")] System.Nullable<int> strcutureAvailable, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RNAID", DbType="VarChar(30)")] string rNAID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), proteinID, proteinName, proteinLength, proteinMass, proteinType, proteinStructure, strcutureAvailable, rNAID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_AddPatient")]
		public int UDSP_AddPatient([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Age", DbType="Int")] System.Nullable<int> age, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Duration", DbType="VarChar(30)")] string duration, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Symptom", DbType="VarChar(30)")] string symptom, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="HospitalizedDays", DbType="Int")] System.Nullable<int> hospitalizedDays, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RegisterDate", DbType="DateTime")] System.Nullable<System.DateTime> registerDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateDate", DbType="DateTime")] System.Nullable<System.DateTime> updateDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Comment", DbType="VarChar(MAX)")] string comment, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PatientCost", DbType="Int")] System.Nullable<int> patientCost)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), age, duration, symptom, hospitalizedDays, isActive, registerDate, updateDate, comment, patientCost);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_AddPathway")]
		public int UDSP_AddPathway([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PathwayID", DbType="VarChar(30)")] string pathwayID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PathwayName", DbType="VarChar(50)")] string pathwayName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CellularProcess", DbType="VarChar(50)")] string cellularProcess)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pathwayID, pathwayName, cellularProcess);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_AddGene")]
		public int UDSP_AddGene([global::System.Data.Linq.Mapping.ParameterAttribute(Name="EntrezGeneID", DbType="VarChar(30)")] string entrezGeneID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GeneSymbol", DbType="VarChar(30)")] string geneSymbol, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GeneName", DbType="VarChar(50)")] string geneName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GeneType", DbType="VarChar(50)")] string geneType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Organism", DbType="VarChar(30)")] string organism, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GeneAlias", DbType="VarChar(50)")] string geneAlias, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Comment", DbType="VarChar(MAX)")] string comment)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), entrezGeneID, geneSymbol, geneName, geneType, organism, geneAlias, comment);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_AddDNA")]
		public int UDSP_AddDNA([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DNAID", DbType="VarChar(30)")] string dNAID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Locus", DbType="VarChar(30)")] string locus, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ExonCount", DbType="Int")] System.Nullable<int> exonCount, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Chromosome", DbType="Int")] System.Nullable<int> chromosome, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DNALength", DbType="VarChar(30)")] string dNALength, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DNAOrientation", DbType="VarChar(30)")] string dNAOrientation, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GeneID", DbType="VarChar(30)")] string geneID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dNAID, locus, exonCount, chromosome, dNALength, dNAOrientation, geneID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UDSP_AddDisease")]
		public int UDSP_AddDisease([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DiseaseName", DbType="VarChar(50)")] string diseaseName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DiseaseType", DbType="VarChar(50)")] string diseaseType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Cure", DbType="VarChar(30)")] string cure, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="OnsetAge", DbType="VarChar(30)")] string onsetAge, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Symptom", DbType="VarChar(MAX)")] string symptom, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Medicine", DbType="VarChar(50)")] string medicine, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MedicineCost", DbType="Int")] System.Nullable<int> medicineCost)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diseaseName, diseaseType, cure, onsetAge, symptom, medicine, medicineCost);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserLogin")]
	public partial class UserLogin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserLoginID;
		
		private string _FullName;
		
		private string _LoginName;
		
		private string _Password;
		
		private string _Email;
		
		private bool _IsActive;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserLoginIDChanging(int value);
    partial void OnUserLoginIDChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnLoginNameChanging(string value);
    partial void OnLoginNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    #endregion
		
		public UserLogin()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLoginID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserLoginID
		{
			get
			{
				return this._UserLoginID;
			}
			set
			{
				if ((this._UserLoginID != value))
				{
					this.OnUserLoginIDChanging(value);
					this.SendPropertyChanging();
					this._UserLoginID = value;
					this.SendPropertyChanged("UserLoginID");
					this.OnUserLoginIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginName", DbType="Char(30) NOT NULL", CanBeNull=false)]
		public string LoginName
		{
			get
			{
				return this._LoginName;
			}
			set
			{
				if ((this._LoginName != value))
				{
					this.OnLoginNameChanging(value);
					this.SendPropertyChanging();
					this._LoginName = value;
					this.SendPropertyChanged("LoginName");
					this.OnLoginNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RNA")]
	public partial class RNA : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _RNAID;
		
		private string _RNALength;
		
		private int _AlternativeSplicing;
		
		private string _DNAID;
		
		private EntityRef<DNA> _DNA;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRNAIDChanging(string value);
    partial void OnRNAIDChanged();
    partial void OnRNALengthChanging(string value);
    partial void OnRNALengthChanged();
    partial void OnAlternativeSplicingChanging(int value);
    partial void OnAlternativeSplicingChanged();
    partial void OnDNAIDChanging(string value);
    partial void OnDNAIDChanged();
    #endregion
		
		public RNA()
		{
			this._DNA = default(EntityRef<DNA>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RNAID", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RNAID
		{
			get
			{
				return this._RNAID;
			}
			set
			{
				if ((this._RNAID != value))
				{
					this.OnRNAIDChanging(value);
					this.SendPropertyChanging();
					this._RNAID = value;
					this.SendPropertyChanged("RNAID");
					this.OnRNAIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RNALength", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string RNALength
		{
			get
			{
				return this._RNALength;
			}
			set
			{
				if ((this._RNALength != value))
				{
					this.OnRNALengthChanging(value);
					this.SendPropertyChanging();
					this._RNALength = value;
					this.SendPropertyChanged("RNALength");
					this.OnRNALengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlternativeSplicing", DbType="Int NOT NULL")]
		public int AlternativeSplicing
		{
			get
			{
				return this._AlternativeSplicing;
			}
			set
			{
				if ((this._AlternativeSplicing != value))
				{
					this.OnAlternativeSplicingChanging(value);
					this.SendPropertyChanging();
					this._AlternativeSplicing = value;
					this.SendPropertyChanged("AlternativeSplicing");
					this.OnAlternativeSplicingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DNAID", DbType="VarChar(30)")]
		public string DNAID
		{
			get
			{
				return this._DNAID;
			}
			set
			{
				if ((this._DNAID != value))
				{
					if (this._DNA.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDNAIDChanging(value);
					this.SendPropertyChanging();
					this._DNAID = value;
					this.SendPropertyChanged("DNAID");
					this.OnDNAIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DNA_RNA", Storage="_DNA", ThisKey="DNAID", OtherKey="DNAID", IsForeignKey=true)]
		public DNA DNA
		{
			get
			{
				return this._DNA.Entity;
			}
			set
			{
				DNA previousValue = this._DNA.Entity;
				if (((previousValue != value) 
							|| (this._DNA.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DNA.Entity = null;
						previousValue.RNAs.Remove(this);
					}
					this._DNA.Entity = value;
					if ((value != null))
					{
						value.RNAs.Add(this);
						this._DNAID = value.DNAID;
					}
					else
					{
						this._DNAID = default(string);
					}
					this.SendPropertyChanged("DNA");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Protein")]
	public partial class Protein
	{
		
		private string _ProteinID;
		
		private string _ProteinName;
		
		private int _ProteinLength;
		
		private int _ProteinMass;
		
		private string _ProteinType;
		
		private string _ProteinStructure;
		
		private int _StrcutureAvailable;
		
		private string _RNAID;
		
		public Protein()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProteinID", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string ProteinID
		{
			get
			{
				return this._ProteinID;
			}
			set
			{
				if ((this._ProteinID != value))
				{
					this._ProteinID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProteinName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string ProteinName
		{
			get
			{
				return this._ProteinName;
			}
			set
			{
				if ((this._ProteinName != value))
				{
					this._ProteinName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProteinLength", DbType="Int NOT NULL")]
		public int ProteinLength
		{
			get
			{
				return this._ProteinLength;
			}
			set
			{
				if ((this._ProteinLength != value))
				{
					this._ProteinLength = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProteinMass", DbType="Int NOT NULL")]
		public int ProteinMass
		{
			get
			{
				return this._ProteinMass;
			}
			set
			{
				if ((this._ProteinMass != value))
				{
					this._ProteinMass = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProteinType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProteinType
		{
			get
			{
				return this._ProteinType;
			}
			set
			{
				if ((this._ProteinType != value))
				{
					this._ProteinType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProteinStructure", DbType="VarChar(30)")]
		public string ProteinStructure
		{
			get
			{
				return this._ProteinStructure;
			}
			set
			{
				if ((this._ProteinStructure != value))
				{
					this._ProteinStructure = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StrcutureAvailable", DbType="Int NOT NULL")]
		public int StrcutureAvailable
		{
			get
			{
				return this._StrcutureAvailable;
			}
			set
			{
				if ((this._StrcutureAvailable != value))
				{
					this._StrcutureAvailable = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RNAID", DbType="VarChar(30)")]
		public string RNAID
		{
			get
			{
				return this._RNAID;
			}
			set
			{
				if ((this._RNAID != value))
				{
					this._RNAID = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatientDiagnosis")]
	public partial class PatientDiagnosi : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PDID;
		
		private string _PDName;
		
		private System.Nullable<int> _DiseaseID;
		
		private System.Nullable<int> _PatientID;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Disease> _Disease;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPDIDChanging(int value);
    partial void OnPDIDChanged();
    partial void OnPDNameChanging(string value);
    partial void OnPDNameChanged();
    partial void OnDiseaseIDChanging(System.Nullable<int> value);
    partial void OnDiseaseIDChanged();
    partial void OnPatientIDChanging(System.Nullable<int> value);
    partial void OnPatientIDChanged();
    #endregion
		
		public PatientDiagnosi()
		{
			this._Patient = default(EntityRef<Patient>);
			this._Disease = default(EntityRef<Disease>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PDID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PDID
		{
			get
			{
				return this._PDID;
			}
			set
			{
				if ((this._PDID != value))
				{
					this.OnPDIDChanging(value);
					this.SendPropertyChanging();
					this._PDID = value;
					this.SendPropertyChanged("PDID");
					this.OnPDIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PDName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string PDName
		{
			get
			{
				return this._PDName;
			}
			set
			{
				if ((this._PDName != value))
				{
					this.OnPDNameChanging(value);
					this.SendPropertyChanging();
					this._PDName = value;
					this.SendPropertyChanged("PDName");
					this.OnPDNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiseaseID", DbType="Int")]
		public System.Nullable<int> DiseaseID
		{
			get
			{
				return this._DiseaseID;
			}
			set
			{
				if ((this._DiseaseID != value))
				{
					if (this._Disease.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDiseaseIDChanging(value);
					this.SendPropertyChanging();
					this._DiseaseID = value;
					this.SendPropertyChanged("DiseaseID");
					this.OnDiseaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int")]
		public System.Nullable<int> PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_PatientDiagnosi", Storage="_Patient", ThisKey="PatientID", OtherKey="PatientID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.PatientDiagnosis.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.PatientDiagnosis.Add(this);
						this._PatientID = value.PatientID;
					}
					else
					{
						this._PatientID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Disease_PatientDiagnosi", Storage="_Disease", ThisKey="DiseaseID", OtherKey="DiseaseID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Disease Disease
		{
			get
			{
				return this._Disease.Entity;
			}
			set
			{
				Disease previousValue = this._Disease.Entity;
				if (((previousValue != value) 
							|| (this._Disease.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Disease.Entity = null;
						previousValue.PatientDiagnosis.Remove(this);
					}
					this._Disease.Entity = value;
					if ((value != null))
					{
						value.PatientDiagnosis.Add(this);
						this._DiseaseID = value.DiseaseID;
					}
					else
					{
						this._DiseaseID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Disease");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PatientID;
		
		private int _Age;
		
		private string _Duration;
		
		private string _Symptom;
		
		private int _HospitalizedDays;
		
		private bool _IsActive;
		
		private System.Nullable<System.DateTime> _RegisterDate;
		
		private System.Nullable<System.DateTime> _UpdateDate;
		
		private string _Comment;
		
		private int _PatientCost;
		
		private EntitySet<PatientDiagnosi> _PatientDiagnosis;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIDChanging(int value);
    partial void OnPatientIDChanged();
    partial void OnAgeChanging(int value);
    partial void OnAgeChanged();
    partial void OnDurationChanging(string value);
    partial void OnDurationChanged();
    partial void OnSymptomChanging(string value);
    partial void OnSymptomChanged();
    partial void OnHospitalizedDaysChanging(int value);
    partial void OnHospitalizedDaysChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnRegisterDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRegisterDateChanged();
    partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdateDateChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnPatientCostChanging(int value);
    partial void OnPatientCostChanged();
    #endregion
		
		public Patient()
		{
			this._PatientDiagnosis = new EntitySet<PatientDiagnosi>(new Action<PatientDiagnosi>(this.attach_PatientDiagnosis), new Action<PatientDiagnosi>(this.detach_PatientDiagnosis));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int NOT NULL")]
		public int Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Symptom", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Symptom
		{
			get
			{
				return this._Symptom;
			}
			set
			{
				if ((this._Symptom != value))
				{
					this.OnSymptomChanging(value);
					this.SendPropertyChanging();
					this._Symptom = value;
					this.SendPropertyChanged("Symptom");
					this.OnSymptomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HospitalizedDays", DbType="Int NOT NULL")]
		public int HospitalizedDays
		{
			get
			{
				return this._HospitalizedDays;
			}
			set
			{
				if ((this._HospitalizedDays != value))
				{
					this.OnHospitalizedDaysChanging(value);
					this.SendPropertyChanging();
					this._HospitalizedDays = value;
					this.SendPropertyChanged("HospitalizedDays");
					this.OnHospitalizedDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegisterDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RegisterDate
		{
			get
			{
				return this._RegisterDate;
			}
			set
			{
				if ((this._RegisterDate != value))
				{
					this.OnRegisterDateChanging(value);
					this.SendPropertyChanging();
					this._RegisterDate = value;
					this.SendPropertyChanged("RegisterDate");
					this.OnRegisterDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientCost", DbType="Int NOT NULL")]
		public int PatientCost
		{
			get
			{
				return this._PatientCost;
			}
			set
			{
				if ((this._PatientCost != value))
				{
					this.OnPatientCostChanging(value);
					this.SendPropertyChanging();
					this._PatientCost = value;
					this.SendPropertyChanged("PatientCost");
					this.OnPatientCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_PatientDiagnosi", Storage="_PatientDiagnosis", ThisKey="PatientID", OtherKey="PatientID")]
		public EntitySet<PatientDiagnosi> PatientDiagnosis
		{
			get
			{
				return this._PatientDiagnosis;
			}
			set
			{
				this._PatientDiagnosis.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PatientDiagnosis(PatientDiagnosi entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_PatientDiagnosis(PatientDiagnosi entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pathway")]
	public partial class Pathway : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PathwayID;
		
		private string _PathwayName;
		
		private string _CellularProcess;
		
		private EntitySet<GeneNetwork> _GeneNetworks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPathwayIDChanging(string value);
    partial void OnPathwayIDChanged();
    partial void OnPathwayNameChanging(string value);
    partial void OnPathwayNameChanged();
    partial void OnCellularProcessChanging(string value);
    partial void OnCellularProcessChanged();
    #endregion
		
		public Pathway()
		{
			this._GeneNetworks = new EntitySet<GeneNetwork>(new Action<GeneNetwork>(this.attach_GeneNetworks), new Action<GeneNetwork>(this.detach_GeneNetworks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathwayID", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PathwayID
		{
			get
			{
				return this._PathwayID;
			}
			set
			{
				if ((this._PathwayID != value))
				{
					this.OnPathwayIDChanging(value);
					this.SendPropertyChanging();
					this._PathwayID = value;
					this.SendPropertyChanged("PathwayID");
					this.OnPathwayIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathwayName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PathwayName
		{
			get
			{
				return this._PathwayName;
			}
			set
			{
				if ((this._PathwayName != value))
				{
					this.OnPathwayNameChanging(value);
					this.SendPropertyChanging();
					this._PathwayName = value;
					this.SendPropertyChanged("PathwayName");
					this.OnPathwayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellularProcess", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CellularProcess
		{
			get
			{
				return this._CellularProcess;
			}
			set
			{
				if ((this._CellularProcess != value))
				{
					this.OnCellularProcessChanging(value);
					this.SendPropertyChanging();
					this._CellularProcess = value;
					this.SendPropertyChanged("CellularProcess");
					this.OnCellularProcessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pathway_GeneNetwork", Storage="_GeneNetworks", ThisKey="PathwayID", OtherKey="PathwayID")]
		public EntitySet<GeneNetwork> GeneNetworks
		{
			get
			{
				return this._GeneNetworks;
			}
			set
			{
				this._GeneNetworks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GeneNetworks(GeneNetwork entity)
		{
			this.SendPropertyChanging();
			entity.Pathway = this;
		}
		
		private void detach_GeneNetworks(GeneNetwork entity)
		{
			this.SendPropertyChanging();
			entity.Pathway = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GeneNetwork")]
	public partial class GeneNetwork : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GNID;
		
		private string _GNName;
		
		private string _GeneID;
		
		private string _PathwayID;
		
		private EntityRef<Pathway> _Pathway;
		
		private EntityRef<Gene> _Gene;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGNIDChanging(int value);
    partial void OnGNIDChanged();
    partial void OnGNNameChanging(string value);
    partial void OnGNNameChanged();
    partial void OnGeneIDChanging(string value);
    partial void OnGeneIDChanged();
    partial void OnPathwayIDChanging(string value);
    partial void OnPathwayIDChanged();
    #endregion
		
		public GeneNetwork()
		{
			this._Pathway = default(EntityRef<Pathway>);
			this._Gene = default(EntityRef<Gene>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GNID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GNID
		{
			get
			{
				return this._GNID;
			}
			set
			{
				if ((this._GNID != value))
				{
					this.OnGNIDChanging(value);
					this.SendPropertyChanging();
					this._GNID = value;
					this.SendPropertyChanged("GNID");
					this.OnGNIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GNName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string GNName
		{
			get
			{
				return this._GNName;
			}
			set
			{
				if ((this._GNName != value))
				{
					this.OnGNNameChanging(value);
					this.SendPropertyChanging();
					this._GNName = value;
					this.SendPropertyChanged("GNName");
					this.OnGNNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneID", DbType="VarChar(30)")]
		public string GeneID
		{
			get
			{
				return this._GeneID;
			}
			set
			{
				if ((this._GeneID != value))
				{
					if (this._Gene.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGeneIDChanging(value);
					this.SendPropertyChanging();
					this._GeneID = value;
					this.SendPropertyChanged("GeneID");
					this.OnGeneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathwayID", DbType="VarChar(30)")]
		public string PathwayID
		{
			get
			{
				return this._PathwayID;
			}
			set
			{
				if ((this._PathwayID != value))
				{
					if (this._Pathway.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPathwayIDChanging(value);
					this.SendPropertyChanging();
					this._PathwayID = value;
					this.SendPropertyChanged("PathwayID");
					this.OnPathwayIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pathway_GeneNetwork", Storage="_Pathway", ThisKey="PathwayID", OtherKey="PathwayID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Pathway Pathway
		{
			get
			{
				return this._Pathway.Entity;
			}
			set
			{
				Pathway previousValue = this._Pathway.Entity;
				if (((previousValue != value) 
							|| (this._Pathway.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pathway.Entity = null;
						previousValue.GeneNetworks.Remove(this);
					}
					this._Pathway.Entity = value;
					if ((value != null))
					{
						value.GeneNetworks.Add(this);
						this._PathwayID = value.PathwayID;
					}
					else
					{
						this._PathwayID = default(string);
					}
					this.SendPropertyChanged("Pathway");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gene_GeneNetwork", Storage="_Gene", ThisKey="GeneID", OtherKey="EntrezGeneID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Gene Gene
		{
			get
			{
				return this._Gene.Entity;
			}
			set
			{
				Gene previousValue = this._Gene.Entity;
				if (((previousValue != value) 
							|| (this._Gene.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gene.Entity = null;
						previousValue.GeneNetworks.Remove(this);
					}
					this._Gene.Entity = value;
					if ((value != null))
					{
						value.GeneNetworks.Add(this);
						this._GeneID = value.EntrezGeneID;
					}
					else
					{
						this._GeneID = default(string);
					}
					this.SendPropertyChanged("Gene");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gene")]
	public partial class Gene : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EntrezGeneID;
		
		private string _GeneSymbol;
		
		private string _GeneName;
		
		private string _GeneType;
		
		private string _Organism;
		
		private string _GeneAlias;
		
		private string _Comment;
		
		private EntitySet<GeneNetwork> _GeneNetworks;
		
		private EntitySet<DNA> _DNAs;
		
		private EntitySet<DiseaseGenetic> _DiseaseGenetics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntrezGeneIDChanging(string value);
    partial void OnEntrezGeneIDChanged();
    partial void OnGeneSymbolChanging(string value);
    partial void OnGeneSymbolChanged();
    partial void OnGeneNameChanging(string value);
    partial void OnGeneNameChanged();
    partial void OnGeneTypeChanging(string value);
    partial void OnGeneTypeChanged();
    partial void OnOrganismChanging(string value);
    partial void OnOrganismChanged();
    partial void OnGeneAliasChanging(string value);
    partial void OnGeneAliasChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public Gene()
		{
			this._GeneNetworks = new EntitySet<GeneNetwork>(new Action<GeneNetwork>(this.attach_GeneNetworks), new Action<GeneNetwork>(this.detach_GeneNetworks));
			this._DNAs = new EntitySet<DNA>(new Action<DNA>(this.attach_DNAs), new Action<DNA>(this.detach_DNAs));
			this._DiseaseGenetics = new EntitySet<DiseaseGenetic>(new Action<DiseaseGenetic>(this.attach_DiseaseGenetics), new Action<DiseaseGenetic>(this.detach_DiseaseGenetics));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntrezGeneID", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EntrezGeneID
		{
			get
			{
				return this._EntrezGeneID;
			}
			set
			{
				if ((this._EntrezGeneID != value))
				{
					this.OnEntrezGeneIDChanging(value);
					this.SendPropertyChanging();
					this._EntrezGeneID = value;
					this.SendPropertyChanged("EntrezGeneID");
					this.OnEntrezGeneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneSymbol", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string GeneSymbol
		{
			get
			{
				return this._GeneSymbol;
			}
			set
			{
				if ((this._GeneSymbol != value))
				{
					this.OnGeneSymbolChanging(value);
					this.SendPropertyChanging();
					this._GeneSymbol = value;
					this.SendPropertyChanged("GeneSymbol");
					this.OnGeneSymbolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GeneName
		{
			get
			{
				return this._GeneName;
			}
			set
			{
				if ((this._GeneName != value))
				{
					this.OnGeneNameChanging(value);
					this.SendPropertyChanging();
					this._GeneName = value;
					this.SendPropertyChanged("GeneName");
					this.OnGeneNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GeneType
		{
			get
			{
				return this._GeneType;
			}
			set
			{
				if ((this._GeneType != value))
				{
					this.OnGeneTypeChanging(value);
					this.SendPropertyChanging();
					this._GeneType = value;
					this.SendPropertyChanged("GeneType");
					this.OnGeneTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Organism", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Organism
		{
			get
			{
				return this._Organism;
			}
			set
			{
				if ((this._Organism != value))
				{
					this.OnOrganismChanging(value);
					this.SendPropertyChanging();
					this._Organism = value;
					this.SendPropertyChanged("Organism");
					this.OnOrganismChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneAlias", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GeneAlias
		{
			get
			{
				return this._GeneAlias;
			}
			set
			{
				if ((this._GeneAlias != value))
				{
					this.OnGeneAliasChanging(value);
					this.SendPropertyChanging();
					this._GeneAlias = value;
					this.SendPropertyChanged("GeneAlias");
					this.OnGeneAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gene_GeneNetwork", Storage="_GeneNetworks", ThisKey="EntrezGeneID", OtherKey="GeneID")]
		public EntitySet<GeneNetwork> GeneNetworks
		{
			get
			{
				return this._GeneNetworks;
			}
			set
			{
				this._GeneNetworks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gene_DNA", Storage="_DNAs", ThisKey="EntrezGeneID", OtherKey="GeneID")]
		public EntitySet<DNA> DNAs
		{
			get
			{
				return this._DNAs;
			}
			set
			{
				this._DNAs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gene_DiseaseGenetic", Storage="_DiseaseGenetics", ThisKey="EntrezGeneID", OtherKey="GeneID")]
		public EntitySet<DiseaseGenetic> DiseaseGenetics
		{
			get
			{
				return this._DiseaseGenetics;
			}
			set
			{
				this._DiseaseGenetics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GeneNetworks(GeneNetwork entity)
		{
			this.SendPropertyChanging();
			entity.Gene = this;
		}
		
		private void detach_GeneNetworks(GeneNetwork entity)
		{
			this.SendPropertyChanging();
			entity.Gene = null;
		}
		
		private void attach_DNAs(DNA entity)
		{
			this.SendPropertyChanging();
			entity.Gene = this;
		}
		
		private void detach_DNAs(DNA entity)
		{
			this.SendPropertyChanging();
			entity.Gene = null;
		}
		
		private void attach_DiseaseGenetics(DiseaseGenetic entity)
		{
			this.SendPropertyChanging();
			entity.Gene = this;
		}
		
		private void detach_DiseaseGenetics(DiseaseGenetic entity)
		{
			this.SendPropertyChanging();
			entity.Gene = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DNA")]
	public partial class DNA : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DNAID;
		
		private string _Locus;
		
		private int _ExonCount;
		
		private int _Chromosome;
		
		private string _DNALength;
		
		private string _DNAOrientation;
		
		private string _GeneID;
		
		private EntitySet<RNA> _RNAs;
		
		private EntityRef<Gene> _Gene;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDNAIDChanging(string value);
    partial void OnDNAIDChanged();
    partial void OnLocusChanging(string value);
    partial void OnLocusChanged();
    partial void OnExonCountChanging(int value);
    partial void OnExonCountChanged();
    partial void OnChromosomeChanging(int value);
    partial void OnChromosomeChanged();
    partial void OnDNALengthChanging(string value);
    partial void OnDNALengthChanged();
    partial void OnDNAOrientationChanging(string value);
    partial void OnDNAOrientationChanged();
    partial void OnGeneIDChanging(string value);
    partial void OnGeneIDChanged();
    #endregion
		
		public DNA()
		{
			this._RNAs = new EntitySet<RNA>(new Action<RNA>(this.attach_RNAs), new Action<RNA>(this.detach_RNAs));
			this._Gene = default(EntityRef<Gene>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DNAID", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DNAID
		{
			get
			{
				return this._DNAID;
			}
			set
			{
				if ((this._DNAID != value))
				{
					this.OnDNAIDChanging(value);
					this.SendPropertyChanging();
					this._DNAID = value;
					this.SendPropertyChanged("DNAID");
					this.OnDNAIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Locus", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Locus
		{
			get
			{
				return this._Locus;
			}
			set
			{
				if ((this._Locus != value))
				{
					this.OnLocusChanging(value);
					this.SendPropertyChanging();
					this._Locus = value;
					this.SendPropertyChanged("Locus");
					this.OnLocusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExonCount", DbType="Int NOT NULL")]
		public int ExonCount
		{
			get
			{
				return this._ExonCount;
			}
			set
			{
				if ((this._ExonCount != value))
				{
					this.OnExonCountChanging(value);
					this.SendPropertyChanging();
					this._ExonCount = value;
					this.SendPropertyChanged("ExonCount");
					this.OnExonCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Chromosome", DbType="Int NOT NULL")]
		public int Chromosome
		{
			get
			{
				return this._Chromosome;
			}
			set
			{
				if ((this._Chromosome != value))
				{
					this.OnChromosomeChanging(value);
					this.SendPropertyChanging();
					this._Chromosome = value;
					this.SendPropertyChanged("Chromosome");
					this.OnChromosomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DNALength", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string DNALength
		{
			get
			{
				return this._DNALength;
			}
			set
			{
				if ((this._DNALength != value))
				{
					this.OnDNALengthChanging(value);
					this.SendPropertyChanging();
					this._DNALength = value;
					this.SendPropertyChanged("DNALength");
					this.OnDNALengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DNAOrientation", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string DNAOrientation
		{
			get
			{
				return this._DNAOrientation;
			}
			set
			{
				if ((this._DNAOrientation != value))
				{
					this.OnDNAOrientationChanging(value);
					this.SendPropertyChanging();
					this._DNAOrientation = value;
					this.SendPropertyChanged("DNAOrientation");
					this.OnDNAOrientationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneID", DbType="VarChar(30)")]
		public string GeneID
		{
			get
			{
				return this._GeneID;
			}
			set
			{
				if ((this._GeneID != value))
				{
					if (this._Gene.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGeneIDChanging(value);
					this.SendPropertyChanging();
					this._GeneID = value;
					this.SendPropertyChanged("GeneID");
					this.OnGeneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DNA_RNA", Storage="_RNAs", ThisKey="DNAID", OtherKey="DNAID")]
		public EntitySet<RNA> RNAs
		{
			get
			{
				return this._RNAs;
			}
			set
			{
				this._RNAs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gene_DNA", Storage="_Gene", ThisKey="GeneID", OtherKey="EntrezGeneID", IsForeignKey=true)]
		public Gene Gene
		{
			get
			{
				return this._Gene.Entity;
			}
			set
			{
				Gene previousValue = this._Gene.Entity;
				if (((previousValue != value) 
							|| (this._Gene.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gene.Entity = null;
						previousValue.DNAs.Remove(this);
					}
					this._Gene.Entity = value;
					if ((value != null))
					{
						value.DNAs.Add(this);
						this._GeneID = value.EntrezGeneID;
					}
					else
					{
						this._GeneID = default(string);
					}
					this.SendPropertyChanged("Gene");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RNAs(RNA entity)
		{
			this.SendPropertyChanging();
			entity.DNA = this;
		}
		
		private void detach_RNAs(RNA entity)
		{
			this.SendPropertyChanging();
			entity.DNA = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DiseaseGenetics")]
	public partial class DiseaseGenetic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DGID;
		
		private string _DGName;
		
		private string _GeneID;
		
		private System.Nullable<int> _DiseaseID;
		
		private EntityRef<Gene> _Gene;
		
		private EntityRef<Disease> _Disease;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDGIDChanging(int value);
    partial void OnDGIDChanged();
    partial void OnDGNameChanging(string value);
    partial void OnDGNameChanged();
    partial void OnGeneIDChanging(string value);
    partial void OnGeneIDChanged();
    partial void OnDiseaseIDChanging(System.Nullable<int> value);
    partial void OnDiseaseIDChanged();
    #endregion
		
		public DiseaseGenetic()
		{
			this._Gene = default(EntityRef<Gene>);
			this._Disease = default(EntityRef<Disease>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DGID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DGID
		{
			get
			{
				return this._DGID;
			}
			set
			{
				if ((this._DGID != value))
				{
					this.OnDGIDChanging(value);
					this.SendPropertyChanging();
					this._DGID = value;
					this.SendPropertyChanged("DGID");
					this.OnDGIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DGName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string DGName
		{
			get
			{
				return this._DGName;
			}
			set
			{
				if ((this._DGName != value))
				{
					this.OnDGNameChanging(value);
					this.SendPropertyChanging();
					this._DGName = value;
					this.SendPropertyChanged("DGName");
					this.OnDGNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneID", DbType="VarChar(30)")]
		public string GeneID
		{
			get
			{
				return this._GeneID;
			}
			set
			{
				if ((this._GeneID != value))
				{
					if (this._Gene.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGeneIDChanging(value);
					this.SendPropertyChanging();
					this._GeneID = value;
					this.SendPropertyChanged("GeneID");
					this.OnGeneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiseaseID", DbType="Int")]
		public System.Nullable<int> DiseaseID
		{
			get
			{
				return this._DiseaseID;
			}
			set
			{
				if ((this._DiseaseID != value))
				{
					if (this._Disease.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDiseaseIDChanging(value);
					this.SendPropertyChanging();
					this._DiseaseID = value;
					this.SendPropertyChanged("DiseaseID");
					this.OnDiseaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Gene_DiseaseGenetic", Storage="_Gene", ThisKey="GeneID", OtherKey="EntrezGeneID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Gene Gene
		{
			get
			{
				return this._Gene.Entity;
			}
			set
			{
				Gene previousValue = this._Gene.Entity;
				if (((previousValue != value) 
							|| (this._Gene.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gene.Entity = null;
						previousValue.DiseaseGenetics.Remove(this);
					}
					this._Gene.Entity = value;
					if ((value != null))
					{
						value.DiseaseGenetics.Add(this);
						this._GeneID = value.EntrezGeneID;
					}
					else
					{
						this._GeneID = default(string);
					}
					this.SendPropertyChanged("Gene");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Disease_DiseaseGenetic", Storage="_Disease", ThisKey="DiseaseID", OtherKey="DiseaseID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Disease Disease
		{
			get
			{
				return this._Disease.Entity;
			}
			set
			{
				Disease previousValue = this._Disease.Entity;
				if (((previousValue != value) 
							|| (this._Disease.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Disease.Entity = null;
						previousValue.DiseaseGenetics.Remove(this);
					}
					this._Disease.Entity = value;
					if ((value != null))
					{
						value.DiseaseGenetics.Add(this);
						this._DiseaseID = value.DiseaseID;
					}
					else
					{
						this._DiseaseID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Disease");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Disease")]
	public partial class Disease : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DiseaseID;
		
		private string _DiseaseName;
		
		private string _DiseaseType;
		
		private string _Cure;
		
		private string _OnsetAge;
		
		private string _Symptom;
		
		private string _Medicine;
		
		private int _MedicineCost;
		
		private EntitySet<PatientDiagnosi> _PatientDiagnosis;
		
		private EntitySet<DiseaseGenetic> _DiseaseGenetics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDiseaseIDChanging(int value);
    partial void OnDiseaseIDChanged();
    partial void OnDiseaseNameChanging(string value);
    partial void OnDiseaseNameChanged();
    partial void OnDiseaseTypeChanging(string value);
    partial void OnDiseaseTypeChanged();
    partial void OnCureChanging(string value);
    partial void OnCureChanged();
    partial void OnOnsetAgeChanging(string value);
    partial void OnOnsetAgeChanged();
    partial void OnSymptomChanging(string value);
    partial void OnSymptomChanged();
    partial void OnMedicineChanging(string value);
    partial void OnMedicineChanged();
    partial void OnMedicineCostChanging(int value);
    partial void OnMedicineCostChanged();
    #endregion
		
		public Disease()
		{
			this._PatientDiagnosis = new EntitySet<PatientDiagnosi>(new Action<PatientDiagnosi>(this.attach_PatientDiagnosis), new Action<PatientDiagnosi>(this.detach_PatientDiagnosis));
			this._DiseaseGenetics = new EntitySet<DiseaseGenetic>(new Action<DiseaseGenetic>(this.attach_DiseaseGenetics), new Action<DiseaseGenetic>(this.detach_DiseaseGenetics));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiseaseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DiseaseID
		{
			get
			{
				return this._DiseaseID;
			}
			set
			{
				if ((this._DiseaseID != value))
				{
					this.OnDiseaseIDChanging(value);
					this.SendPropertyChanging();
					this._DiseaseID = value;
					this.SendPropertyChanged("DiseaseID");
					this.OnDiseaseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiseaseName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DiseaseName
		{
			get
			{
				return this._DiseaseName;
			}
			set
			{
				if ((this._DiseaseName != value))
				{
					this.OnDiseaseNameChanging(value);
					this.SendPropertyChanging();
					this._DiseaseName = value;
					this.SendPropertyChanged("DiseaseName");
					this.OnDiseaseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiseaseType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DiseaseType
		{
			get
			{
				return this._DiseaseType;
			}
			set
			{
				if ((this._DiseaseType != value))
				{
					this.OnDiseaseTypeChanging(value);
					this.SendPropertyChanging();
					this._DiseaseType = value;
					this.SendPropertyChanged("DiseaseType");
					this.OnDiseaseTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cure", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Cure
		{
			get
			{
				return this._Cure;
			}
			set
			{
				if ((this._Cure != value))
				{
					this.OnCureChanging(value);
					this.SendPropertyChanging();
					this._Cure = value;
					this.SendPropertyChanged("Cure");
					this.OnCureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnsetAge", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string OnsetAge
		{
			get
			{
				return this._OnsetAge;
			}
			set
			{
				if ((this._OnsetAge != value))
				{
					this.OnOnsetAgeChanging(value);
					this.SendPropertyChanging();
					this._OnsetAge = value;
					this.SendPropertyChanged("OnsetAge");
					this.OnOnsetAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Symptom", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Symptom
		{
			get
			{
				return this._Symptom;
			}
			set
			{
				if ((this._Symptom != value))
				{
					this.OnSymptomChanging(value);
					this.SendPropertyChanging();
					this._Symptom = value;
					this.SendPropertyChanged("Symptom");
					this.OnSymptomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Medicine", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Medicine
		{
			get
			{
				return this._Medicine;
			}
			set
			{
				if ((this._Medicine != value))
				{
					this.OnMedicineChanging(value);
					this.SendPropertyChanging();
					this._Medicine = value;
					this.SendPropertyChanged("Medicine");
					this.OnMedicineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineCost", DbType="Int NOT NULL")]
		public int MedicineCost
		{
			get
			{
				return this._MedicineCost;
			}
			set
			{
				if ((this._MedicineCost != value))
				{
					this.OnMedicineCostChanging(value);
					this.SendPropertyChanging();
					this._MedicineCost = value;
					this.SendPropertyChanged("MedicineCost");
					this.OnMedicineCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Disease_PatientDiagnosi", Storage="_PatientDiagnosis", ThisKey="DiseaseID", OtherKey="DiseaseID")]
		public EntitySet<PatientDiagnosi> PatientDiagnosis
		{
			get
			{
				return this._PatientDiagnosis;
			}
			set
			{
				this._PatientDiagnosis.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Disease_DiseaseGenetic", Storage="_DiseaseGenetics", ThisKey="DiseaseID", OtherKey="DiseaseID")]
		public EntitySet<DiseaseGenetic> DiseaseGenetics
		{
			get
			{
				return this._DiseaseGenetics;
			}
			set
			{
				this._DiseaseGenetics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PatientDiagnosis(PatientDiagnosi entity)
		{
			this.SendPropertyChanging();
			entity.Disease = this;
		}
		
		private void detach_PatientDiagnosis(PatientDiagnosi entity)
		{
			this.SendPropertyChanging();
			entity.Disease = null;
		}
		
		private void attach_DiseaseGenetics(DiseaseGenetic entity)
		{
			this.SendPropertyChanging();
			entity.Disease = this;
		}
		
		private void detach_DiseaseGenetics(DiseaseGenetic entity)
		{
			this.SendPropertyChanging();
			entity.Disease = null;
		}
	}
	
	public partial class UDSP_ViewRecord_RNAResult
	{
		
		private string _RNAID;
		
		private string _RNALength;
		
		private int _AlternativeSplicing;
		
		private string _DNAID;
		
		public UDSP_ViewRecord_RNAResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RNAID", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string RNAID
		{
			get
			{
				return this._RNAID;
			}
			set
			{
				if ((this._RNAID != value))
				{
					this._RNAID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RNALength", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string RNALength
		{
			get
			{
				return this._RNALength;
			}
			set
			{
				if ((this._RNALength != value))
				{
					this._RNALength = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlternativeSplicing", DbType="Int NOT NULL")]
		public int AlternativeSplicing
		{
			get
			{
				return this._AlternativeSplicing;
			}
			set
			{
				if ((this._AlternativeSplicing != value))
				{
					this._AlternativeSplicing = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DNAID", DbType="VarChar(30)")]
		public string DNAID
		{
			get
			{
				return this._DNAID;
			}
			set
			{
				if ((this._DNAID != value))
				{
					this._DNAID = value;
				}
			}
		}
	}
	
	public partial class UDSP_ViewRecord_ProteinResult
	{
		
		private string _ProteinID;
		
		private string _ProteinName;
		
		private int _ProteinLength;
		
		private int _ProteinMass;
		
		private string _ProteinType;
		
		private string _ProteinStructure;
		
		private int _StrcutureAvailable;
		
		private string _RNAID;
		
		public UDSP_ViewRecord_ProteinResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProteinID", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string ProteinID
		{
			get
			{
				return this._ProteinID;
			}
			set
			{
				if ((this._ProteinID != value))
				{
					this._ProteinID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProteinName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string ProteinName
		{
			get
			{
				return this._ProteinName;
			}
			set
			{
				if ((this._ProteinName != value))
				{
					this._ProteinName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProteinLength", DbType="Int NOT NULL")]
		public int ProteinLength
		{
			get
			{
				return this._ProteinLength;
			}
			set
			{
				if ((this._ProteinLength != value))
				{
					this._ProteinLength = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProteinMass", DbType="Int NOT NULL")]
		public int ProteinMass
		{
			get
			{
				return this._ProteinMass;
			}
			set
			{
				if ((this._ProteinMass != value))
				{
					this._ProteinMass = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProteinType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProteinType
		{
			get
			{
				return this._ProteinType;
			}
			set
			{
				if ((this._ProteinType != value))
				{
					this._ProteinType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProteinStructure", DbType="VarChar(30)")]
		public string ProteinStructure
		{
			get
			{
				return this._ProteinStructure;
			}
			set
			{
				if ((this._ProteinStructure != value))
				{
					this._ProteinStructure = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StrcutureAvailable", DbType="Int NOT NULL")]
		public int StrcutureAvailable
		{
			get
			{
				return this._StrcutureAvailable;
			}
			set
			{
				if ((this._StrcutureAvailable != value))
				{
					this._StrcutureAvailable = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RNAID", DbType="VarChar(30)")]
		public string RNAID
		{
			get
			{
				return this._RNAID;
			}
			set
			{
				if ((this._RNAID != value))
				{
					this._RNAID = value;
				}
			}
		}
	}
	
	public partial class UDSP_ViewRecord_PatientResult
	{
		
		private int _PatientID;
		
		private int _Age;
		
		private string _Duration;
		
		private string _Symptom;
		
		private int _HospitalizedDays;
		
		private bool _IsActive;
		
		private System.Nullable<System.DateTime> _RegisterDate;
		
		private System.Nullable<System.DateTime> _UpdateDate;
		
		private string _Comment;
		
		private int _PatientCost;
		
		public UDSP_ViewRecord_PatientResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int NOT NULL")]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this._PatientID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int NOT NULL")]
		public int Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this._Age = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this._Duration = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Symptom", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Symptom
		{
			get
			{
				return this._Symptom;
			}
			set
			{
				if ((this._Symptom != value))
				{
					this._Symptom = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HospitalizedDays", DbType="Int NOT NULL")]
		public int HospitalizedDays
		{
			get
			{
				return this._HospitalizedDays;
			}
			set
			{
				if ((this._HospitalizedDays != value))
				{
					this._HospitalizedDays = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegisterDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RegisterDate
		{
			get
			{
				return this._RegisterDate;
			}
			set
			{
				if ((this._RegisterDate != value))
				{
					this._RegisterDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this._UpdateDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this._Comment = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientCost", DbType="Int NOT NULL")]
		public int PatientCost
		{
			get
			{
				return this._PatientCost;
			}
			set
			{
				if ((this._PatientCost != value))
				{
					this._PatientCost = value;
				}
			}
		}
	}
	
	public partial class UDSP_ViewRecord_PathwayResult
	{
		
		private string _PathwayID;
		
		private string _PathwayName;
		
		private string _CellularProcess;
		
		public UDSP_ViewRecord_PathwayResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathwayID", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string PathwayID
		{
			get
			{
				return this._PathwayID;
			}
			set
			{
				if ((this._PathwayID != value))
				{
					this._PathwayID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathwayName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PathwayName
		{
			get
			{
				return this._PathwayName;
			}
			set
			{
				if ((this._PathwayName != value))
				{
					this._PathwayName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellularProcess", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CellularProcess
		{
			get
			{
				return this._CellularProcess;
			}
			set
			{
				if ((this._CellularProcess != value))
				{
					this._CellularProcess = value;
				}
			}
		}
	}
	
	public partial class UDSP_ViewRecord_GeneResult
	{
		
		private string _EntrezGeneID;
		
		private string _GeneSymbol;
		
		private string _GeneName;
		
		private string _GeneType;
		
		private string _Organism;
		
		private string _GeneAlias;
		
		private string _Comment;
		
		public UDSP_ViewRecord_GeneResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntrezGeneID", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string EntrezGeneID
		{
			get
			{
				return this._EntrezGeneID;
			}
			set
			{
				if ((this._EntrezGeneID != value))
				{
					this._EntrezGeneID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneSymbol", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string GeneSymbol
		{
			get
			{
				return this._GeneSymbol;
			}
			set
			{
				if ((this._GeneSymbol != value))
				{
					this._GeneSymbol = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GeneName
		{
			get
			{
				return this._GeneName;
			}
			set
			{
				if ((this._GeneName != value))
				{
					this._GeneName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GeneType
		{
			get
			{
				return this._GeneType;
			}
			set
			{
				if ((this._GeneType != value))
				{
					this._GeneType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Organism", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Organism
		{
			get
			{
				return this._Organism;
			}
			set
			{
				if ((this._Organism != value))
				{
					this._Organism = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneAlias", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GeneAlias
		{
			get
			{
				return this._GeneAlias;
			}
			set
			{
				if ((this._GeneAlias != value))
				{
					this._GeneAlias = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this._Comment = value;
				}
			}
		}
	}
	
	public partial class UDSP_ViewRecord_DNAResult
	{
		
		private string _DNAID;
		
		private string _Locus;
		
		private int _ExonCount;
		
		private int _Chromosome;
		
		private string _DNALength;
		
		private string _DNAOrientation;
		
		private string _GeneID;
		
		public UDSP_ViewRecord_DNAResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DNAID", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string DNAID
		{
			get
			{
				return this._DNAID;
			}
			set
			{
				if ((this._DNAID != value))
				{
					this._DNAID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Locus", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Locus
		{
			get
			{
				return this._Locus;
			}
			set
			{
				if ((this._Locus != value))
				{
					this._Locus = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExonCount", DbType="Int NOT NULL")]
		public int ExonCount
		{
			get
			{
				return this._ExonCount;
			}
			set
			{
				if ((this._ExonCount != value))
				{
					this._ExonCount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Chromosome", DbType="Int NOT NULL")]
		public int Chromosome
		{
			get
			{
				return this._Chromosome;
			}
			set
			{
				if ((this._Chromosome != value))
				{
					this._Chromosome = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DNALength", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string DNALength
		{
			get
			{
				return this._DNALength;
			}
			set
			{
				if ((this._DNALength != value))
				{
					this._DNALength = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DNAOrientation", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string DNAOrientation
		{
			get
			{
				return this._DNAOrientation;
			}
			set
			{
				if ((this._DNAOrientation != value))
				{
					this._DNAOrientation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneID", DbType="VarChar(30)")]
		public string GeneID
		{
			get
			{
				return this._GeneID;
			}
			set
			{
				if ((this._GeneID != value))
				{
					this._GeneID = value;
				}
			}
		}
	}
	
	public partial class UDSP_ViewRecord_DiseaseResult
	{
		
		private int _DiseaseID;
		
		private string _DiseaseName;
		
		private string _DiseaseType;
		
		private string _Cure;
		
		private string _OnsetAge;
		
		private string _Symptom;
		
		private string _Medicine;
		
		private int _MedicineCost;
		
		public UDSP_ViewRecord_DiseaseResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiseaseID", DbType="Int NOT NULL")]
		public int DiseaseID
		{
			get
			{
				return this._DiseaseID;
			}
			set
			{
				if ((this._DiseaseID != value))
				{
					this._DiseaseID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiseaseName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DiseaseName
		{
			get
			{
				return this._DiseaseName;
			}
			set
			{
				if ((this._DiseaseName != value))
				{
					this._DiseaseName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiseaseType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DiseaseType
		{
			get
			{
				return this._DiseaseType;
			}
			set
			{
				if ((this._DiseaseType != value))
				{
					this._DiseaseType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cure", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Cure
		{
			get
			{
				return this._Cure;
			}
			set
			{
				if ((this._Cure != value))
				{
					this._Cure = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnsetAge", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string OnsetAge
		{
			get
			{
				return this._OnsetAge;
			}
			set
			{
				if ((this._OnsetAge != value))
				{
					this._OnsetAge = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Symptom", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Symptom
		{
			get
			{
				return this._Symptom;
			}
			set
			{
				if ((this._Symptom != value))
				{
					this._Symptom = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Medicine", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Medicine
		{
			get
			{
				return this._Medicine;
			}
			set
			{
				if ((this._Medicine != value))
				{
					this._Medicine = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineCost", DbType="Int NOT NULL")]
		public int MedicineCost
		{
			get
			{
				return this._MedicineCost;
			}
			set
			{
				if ((this._MedicineCost != value))
				{
					this._MedicineCost = value;
				}
			}
		}
	}
	
	public partial class UDSP_ViewRecordResult
	{
		
		private string _EntrezGeneID;
		
		private string _GeneSymbol;
		
		private string _GeneName;
		
		private string _GeneType;
		
		private string _Organism;
		
		private string _GeneAlias;
		
		private string _Comment;
		
		public UDSP_ViewRecordResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntrezGeneID", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string EntrezGeneID
		{
			get
			{
				return this._EntrezGeneID;
			}
			set
			{
				if ((this._EntrezGeneID != value))
				{
					this._EntrezGeneID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneSymbol", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string GeneSymbol
		{
			get
			{
				return this._GeneSymbol;
			}
			set
			{
				if ((this._GeneSymbol != value))
				{
					this._GeneSymbol = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GeneName
		{
			get
			{
				return this._GeneName;
			}
			set
			{
				if ((this._GeneName != value))
				{
					this._GeneName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GeneType
		{
			get
			{
				return this._GeneType;
			}
			set
			{
				if ((this._GeneType != value))
				{
					this._GeneType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Organism", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Organism
		{
			get
			{
				return this._Organism;
			}
			set
			{
				if ((this._Organism != value))
				{
					this._Organism = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneAlias", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GeneAlias
		{
			get
			{
				return this._GeneAlias;
			}
			set
			{
				if ((this._GeneAlias != value))
				{
					this._GeneAlias = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this._Comment = value;
				}
			}
		}
	}
	
	public partial class UDSP_PatientDiagnosisResult
	{
		
		private string _DiseaseName;
		
		private string _DiseaseType;
		
		private string _Cure;
		
		private string _Medicine;
		
		private int _PatientID;
		
		private string _Symptom;
		
		public UDSP_PatientDiagnosisResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiseaseName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DiseaseName
		{
			get
			{
				return this._DiseaseName;
			}
			set
			{
				if ((this._DiseaseName != value))
				{
					this._DiseaseName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiseaseType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DiseaseType
		{
			get
			{
				return this._DiseaseType;
			}
			set
			{
				if ((this._DiseaseType != value))
				{
					this._DiseaseType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cure", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Cure
		{
			get
			{
				return this._Cure;
			}
			set
			{
				if ((this._Cure != value))
				{
					this._Cure = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Medicine", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Medicine
		{
			get
			{
				return this._Medicine;
			}
			set
			{
				if ((this._Medicine != value))
				{
					this._Medicine = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int NOT NULL")]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this._PatientID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Symptom", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Symptom
		{
			get
			{
				return this._Symptom;
			}
			set
			{
				if ((this._Symptom != value))
				{
					this._Symptom = value;
				}
			}
		}
	}
	
	public partial class UDSP_PatientCostResult
	{
		
		private int _PatientID;
		
		private int _HospitalizedDays;
		
		private int _TotalCost;
		
		private System.Nullable<int> _HospitalCost;
		
		private string _Medicine;
		
		private System.Nullable<int> _MedicineCost;
		
		public UDSP_PatientCostResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int NOT NULL")]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this._PatientID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HospitalizedDays", DbType="Int NOT NULL")]
		public int HospitalizedDays
		{
			get
			{
				return this._HospitalizedDays;
			}
			set
			{
				if ((this._HospitalizedDays != value))
				{
					this._HospitalizedDays = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCost", DbType="Int NOT NULL")]
		public int TotalCost
		{
			get
			{
				return this._TotalCost;
			}
			set
			{
				if ((this._TotalCost != value))
				{
					this._TotalCost = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HospitalCost", DbType="Int")]
		public System.Nullable<int> HospitalCost
		{
			get
			{
				return this._HospitalCost;
			}
			set
			{
				if ((this._HospitalCost != value))
				{
					this._HospitalCost = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Medicine", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Medicine
		{
			get
			{
				return this._Medicine;
			}
			set
			{
				if ((this._Medicine != value))
				{
					this._Medicine = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineCost", DbType="Int")]
		public System.Nullable<int> MedicineCost
		{
			get
			{
				return this._MedicineCost;
			}
			set
			{
				if ((this._MedicineCost != value))
				{
					this._MedicineCost = value;
				}
			}
		}
	}
	
	public partial class UDSP_GenomicAnalysisResult
	{
		
		private string _EntrezGeneID;
		
		private string _GeneName;
		
		private string _DNAID;
		
		private int _Chromosome;
		
		private int _AlternativeSplicing;
		
		private string _ProteinName;
		
		private string _ProteinType;
		
		public UDSP_GenomicAnalysisResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntrezGeneID", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string EntrezGeneID
		{
			get
			{
				return this._EntrezGeneID;
			}
			set
			{
				if ((this._EntrezGeneID != value))
				{
					this._EntrezGeneID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GeneName
		{
			get
			{
				return this._GeneName;
			}
			set
			{
				if ((this._GeneName != value))
				{
					this._GeneName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DNAID", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string DNAID
		{
			get
			{
				return this._DNAID;
			}
			set
			{
				if ((this._DNAID != value))
				{
					this._DNAID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Chromosome", DbType="Int NOT NULL")]
		public int Chromosome
		{
			get
			{
				return this._Chromosome;
			}
			set
			{
				if ((this._Chromosome != value))
				{
					this._Chromosome = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlternativeSplicing", DbType="Int NOT NULL")]
		public int AlternativeSplicing
		{
			get
			{
				return this._AlternativeSplicing;
			}
			set
			{
				if ((this._AlternativeSplicing != value))
				{
					this._AlternativeSplicing = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProteinName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string ProteinName
		{
			get
			{
				return this._ProteinName;
			}
			set
			{
				if ((this._ProteinName != value))
				{
					this._ProteinName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProteinType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProteinType
		{
			get
			{
				return this._ProteinType;
			}
			set
			{
				if ((this._ProteinType != value))
				{
					this._ProteinType = value;
				}
			}
		}
	}
	
	public partial class UDSP_GeneralResult
	{
		
		private string _DiseaseName;
		
		private string _DiseaseType;
		
		private string _GeneName;
		
		private string _GeneSymbol;
		
		private System.Nullable<int> _TotalPatient;
		
		public UDSP_GeneralResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiseaseName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DiseaseName
		{
			get
			{
				return this._DiseaseName;
			}
			set
			{
				if ((this._DiseaseName != value))
				{
					this._DiseaseName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiseaseType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DiseaseType
		{
			get
			{
				return this._DiseaseType;
			}
			set
			{
				if ((this._DiseaseType != value))
				{
					this._DiseaseType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GeneName
		{
			get
			{
				return this._GeneName;
			}
			set
			{
				if ((this._GeneName != value))
				{
					this._GeneName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeneSymbol", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string GeneSymbol
		{
			get
			{
				return this._GeneSymbol;
			}
			set
			{
				if ((this._GeneSymbol != value))
				{
					this._GeneSymbol = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPatient", DbType="Int")]
		public System.Nullable<int> TotalPatient
		{
			get
			{
				return this._TotalPatient;
			}
			set
			{
				if ((this._TotalPatient != value))
				{
					this._TotalPatient = value;
				}
			}
		}
	}
	
	public partial class UDSP_EpidemiologyResult
	{
		
		private string _DiseaseName;
		
		private string _DiseaseType;
		
		private string _OnsetAge;
		
		private string _Symptom;
		
		private System.Nullable<int> _TotalPatient;
		
		private System.Nullable<int> _TotalCost;
		
		private System.Nullable<int> _AverageCost;
		
		public UDSP_EpidemiologyResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiseaseName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DiseaseName
		{
			get
			{
				return this._DiseaseName;
			}
			set
			{
				if ((this._DiseaseName != value))
				{
					this._DiseaseName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiseaseType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DiseaseType
		{
			get
			{
				return this._DiseaseType;
			}
			set
			{
				if ((this._DiseaseType != value))
				{
					this._DiseaseType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnsetAge", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string OnsetAge
		{
			get
			{
				return this._OnsetAge;
			}
			set
			{
				if ((this._OnsetAge != value))
				{
					this._OnsetAge = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Symptom", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Symptom
		{
			get
			{
				return this._Symptom;
			}
			set
			{
				if ((this._Symptom != value))
				{
					this._Symptom = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPatient", DbType="Int")]
		public System.Nullable<int> TotalPatient
		{
			get
			{
				return this._TotalPatient;
			}
			set
			{
				if ((this._TotalPatient != value))
				{
					this._TotalPatient = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCost", DbType="Int")]
		public System.Nullable<int> TotalCost
		{
			get
			{
				return this._TotalCost;
			}
			set
			{
				if ((this._TotalCost != value))
				{
					this._TotalCost = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AverageCost", DbType="Int")]
		public System.Nullable<int> AverageCost
		{
			get
			{
				return this._AverageCost;
			}
			set
			{
				if ((this._AverageCost != value))
				{
					this._AverageCost = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
